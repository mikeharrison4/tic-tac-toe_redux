{"ast":null,"code":"var _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\nimport { setWinningSquares } from \"../ducks/winningSquaresReducer\";\nimport { setGameFinished } from \"../ducks/gameWonReducer\";\n\nconst Board = ({\n  currentPlayer,\n  board,\n  winningSquares,\n  gameFinished,\n  name1,\n  name2\n}) => {\n  const name = currentPlayer === 'X' ? name1 : name2;\n  const winningPlayer = gameWon ? currentPlayer === 'X' ? name2 : name1 : null;\n  const message = gameWon ? `${winningPlayer} WINS!` : `${name}'s turn to play`;\n  console.log(gameFinished);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    gameFinished: gameWon,\n    winningSquares: winningSquares,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, message)));\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1],\n  winningSquares: state.winningSquares,\n  gameFinished: state.gameFinished\n});\n\nexport default connect(mapStateToProps, {\n  setWinningSquares,\n  setGameFinished\n})(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","setWinningSquares","setGameFinished","Board","currentPlayer","board","winningSquares","gameFinished","name1","name2","name","winningPlayer","gameWon","message","console","log","map","square","index","mapStateToProps","state","players"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,gCAAhC;AACA,SAAQC,eAAR,QAA8B,yBAA9B;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA,cAAvB;AAAuCC,EAAAA,YAAvC;AAAqDC,EAAAA,KAArD;AAA4DC,EAAAA;AAA5D,CAAD,KAAwE;AAElF,QAAMC,IAAI,GAAGN,aAAa,KAAK,GAAlB,GACPI,KADO,GACCC,KADd;AAEA,QAAME,aAAa,GAAGC,OAAO,GAAGR,aAAa,KAAK,GAAlB,GAC5BK,KAD4B,GACpBD,KADiB,GACT,IADpB;AAEA,QAAMK,OAAO,GAAGD,OAAO,GAAI,GAAED,aAAc,QAApB,GAClB,GAAED,IAAK,iBADZ;AAGAI,EAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AAEA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,KAAK,CAACW,GAAN,CAAW,CAACC,MAAD,EAASC,KAAT,KACR,oBAAC,WAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,MAAM,EAAED,MAFZ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,YAAY,EAAEN,OAJlB;AAKI,IAAA,cAAc,EAAEN,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CADJ,EAYI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIO,OAAJ,CADJ,CAZJ,CADJ;AAkBH,CA7BD;;AA+BA,MAAMM,eAAe,GAAIC,KAAD,KAAY;AAChCf,EAAAA,KAAK,EAAEe,KAAK,CAACf,KADmB;AAEhCD,EAAAA,aAAa,EAAEgB,KAAK,CAAChB,aAFW;AAGhCI,EAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAc,CAAd,CAHyB;AAIhCZ,EAAAA,KAAK,EAAEW,KAAK,CAACC,OAAN,CAAc,CAAd,CAJyB;AAKhCf,EAAAA,cAAc,EAAEc,KAAK,CAACd,cALU;AAMhCC,EAAAA,YAAY,EAAEa,KAAK,CAACb;AANY,CAAZ,CAAxB;;AASA,eAAeP,OAAO,CAACmB,eAAD,EAAkB;AAAElB,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAlB,CAAP,CAAiEC,KAAjE,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\nimport {setWinningSquares} from \"../ducks/winningSquaresReducer\";\nimport {setGameFinished} from \"../ducks/gameWonReducer\";\n\nconst Board = ({currentPlayer, board, winningSquares, gameFinished, name1, name2}) => {\n\n    const name = currentPlayer === 'X'\n        ? name1 : name2;\n    const winningPlayer = gameWon ? currentPlayer === 'X' ?\n        name2 : name1 : null;\n    const message = gameWon ? `${winningPlayer} WINS!` :\n        `${name}'s turn to play`;\n\n    console.log(gameFinished);\n\n    return (\n        <Fragment>\n            <div className='board'>\n                {board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        gameFinished={gameWon}\n                        winningSquares={winningSquares}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1],\n    winningSquares: state.winningSquares,\n    gameFinished: state.gameFinished\n});\n\nexport default connect(mapStateToProps, { setWinningSquares, setGameFinished })(Board);\n"]},"metadata":{},"sourceType":"module"}