{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\n\nconst Board = props => {\n  const name = props.currentPlayer === 'X' ? props.name1 : props.name2;\n  const winningPlayer = wonGame(props.board) ? props.currentPlayer === 'X' ? props.name2 : props.name1 : null;\n  const message = wonGame(props.board) ? `${winningPlayer} WINS!` : `${name}'s turn to play`;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer,\n    disabled: wonGame(props.board),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, message)));\n};\n\nconst wonGame = squares => {\n  const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  winningCombos.forEach(winningCombo => {\n    const _winningCombo = _slicedToArray(winningCombo, 3),\n          a = _winningCombo[0],\n          b = _winningCombo[1],\n          c = _winningCombo[2];\n\n    console.log(winningCombo);\n\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      return true;\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","Board","props","name","currentPlayer","name1","name2","winningPlayer","wonGame","board","message","map","square","index","squares","winningCombos","forEach","winningCombo","a","b","c","console","log","mapStateToProps","state","players"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\n\nconst Board = props => {\n    const name = props.currentPlayer === 'X'\n        ? props.name1 : props.name2;\n    const winningPlayer = wonGame(props.board) ? props.currentPlayer === 'X' ?\n        props.name2 : props.name1 : null;\n    const message = wonGame(props.board) ? `${winningPlayer} WINS!` :\n        `${name}'s turn to play`;\n    return (\n        <Fragment>\n            <div className='board'>\n                {props.board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        currentPlayer={props.currentPlayer}\n                        disabled={wonGame(props.board)}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n        </Fragment>\n    );\n};\n\nconst wonGame = (squares) => {\n    const winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    winningCombos.forEach( winningCombo => {\n        const [a, b, c] = winningCombo;\n        console.log(winningCombo);\n        if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return true;\n        }\n    });\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}