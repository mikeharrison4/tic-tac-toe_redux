{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\nimport { setWinningSquares } from \"../ducks/winningSquaresReducer\";\n\nconst Board = props => {\n  const gameWon = wonGame(props);\n  const name = props.currentPlayer === 'X' ? props.name1 : props.name2;\n  const winningPlayer = gameWon ? props.currentPlayer === 'X' ? props.name2 : props.name1 : null;\n  const message = gameWon ? `${winningPlayer} WINS!` : `${name}'s turn to play`;\n  console.log(props.winningSquares);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer,\n    disabled: gameWon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, message)));\n};\n\nconst wonGame = props => {\n  const board = props.board;\n  let won = false;\n  const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  winningCombos.forEach(combo => {\n    const _combo = _slicedToArray(combo, 3),\n          a = _combo[0],\n          b = _combo[1],\n          c = _combo[2];\n\n    if (board[a] !== null && board[a] === board[b] && board[b] === board[c]) {\n      won = combo;\n      props.setWinningSquares(a, b, c);\n    }\n  });\n  return won;\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1],\n  winningSquares: state.winningSquares\n});\n\nexport default connect(mapStateToProps, {\n  setWinningSquares\n})(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","setWinningSquares","Board","props","gameWon","wonGame","name","currentPlayer","name1","name2","winningPlayer","message","console","log","winningSquares","board","map","square","index","won","winningCombos","forEach","combo","a","b","c","mapStateToProps","state","players"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\nimport {setWinningSquares} from \"../ducks/winningSquaresReducer\";\n\nconst Board = props => {\n    const gameWon = wonGame(props);\n    const name = props.currentPlayer === 'X'\n        ? props.name1 : props.name2;\n    const winningPlayer = gameWon ? props.currentPlayer === 'X' ?\n        props.name2 : props.name1 : null;\n    const message = gameWon ? `${winningPlayer} WINS!` :\n        `${name}'s turn to play`;\n\n    console.log(props.winningSquares);\n\n    return (\n        <Fragment>\n            <div className='board'>\n                {props.board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        currentPlayer={props.currentPlayer}\n                        disabled={gameWon}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n        </Fragment>\n    );\n};\n\nconst wonGame = (props) => {\n    const { board } = props;\n    let won = false;\n    const winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    winningCombos.forEach( combo => {\n        const [a, b, c] = combo;\n        if(board[a] !== null && board[a] === board[b] && board[b] === board[c]) {\n            won = combo;\n            props.setWinningSquares(a, b, c);\n        }\n    });\n    return won;\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1],\n    winningSquares: state.winningSquares\n});\n\nexport default connect(mapStateToProps, { setWinningSquares })(Board);\n"]},"metadata":{},"sourceType":"module"}