{"ast":null,"code":"var _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\n\nconst Board = props => {\n  const name = props.currentPlayer === 'X' ? props.name1 : props.name2;\n  calculateWinner(props.board);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, name, \"'s turn to play\")));\n};\n\nconst calculateWinner = board => {};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","Board","props","name","currentPlayer","name1","name2","calculateWinner","board","map","square","index","mapStateToProps","state","players"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACf,QAAMC,IAAI,GAAGD,KAAK,CAACE,aAAN,KAAwB,GAAxB,GACPF,KAAK,CAACG,KADC,GACOH,KAAK,CAACI,KAD1B;AAGAC,EAAAA,eAAe,CAACL,KAAK,CAACM,KAAP,CAAf;AAEA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,KAAK,CAACM,KAAN,CAAYC,GAAZ,CAAiB,CAACC,MAAD,EAASC,KAAT,KACd,oBAAC,WAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,MAAM,EAAED,MAFZ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,aAAa,EAAET,KAAK,CAACE,aAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CADJ,EAWI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAL,oBADJ,CAXJ,CADJ;AAiBP,CAvBD;;AAyBA,MAAMI,eAAe,GAAIC,KAAD,IAAW,CAElC,CAFD;;AAIA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAChCL,EAAAA,KAAK,EAAEK,KAAK,CAACL,KADmB;AAEhCJ,EAAAA,aAAa,EAAES,KAAK,CAACT,aAFW;AAGhCC,EAAAA,KAAK,EAAEQ,KAAK,CAACC,OAAN,CAAc,CAAd,CAHyB;AAIhCR,EAAAA,KAAK,EAAEO,KAAK,CAACC,OAAN,CAAc,CAAd;AAJyB,CAAZ,CAAxB;;AAOA,eAAed,OAAO,CAACY,eAAD,CAAP,CAAyBX,KAAzB,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\n\nconst Board = props => {\n        const name = props.currentPlayer === 'X'\n            ? props.name1 : props.name2;\n\n        calculateWinner(props.board);\n\n        return (\n            <Fragment>\n                <div className='board'>\n                    {props.board.map( (square, index) => (\n                        <BoardSquare\n                            key={index}\n                            square={square}\n                            index={index}\n                            currentPlayer={props.currentPlayer}\n                        />\n                    ) )}\n                </div>\n                <div className='instructions'>\n                    <p>{ name }'s turn to play</p>\n                </div>\n            </Fragment>\n        );\n}\n\nconst calculateWinner = (board) => {\n\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}