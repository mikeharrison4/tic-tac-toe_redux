{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\n\nconst Board = props => {\n  const gameWon = wonGame(props.board);\n  const name = props.currentPlayer === 'X' ? props.name1 : props.name2;\n  const winningPlayer = gameWon ? props.currentPlayer === 'X' ? props.name2 : props.name1 : null;\n  const message = gameWon ? `${winningPlayer} WINS!` : `${name}'s turn to play`;\n  console.log(gameWon);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer,\n    disabled: gameWon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, message)));\n};\n\nconst wonGame = squares => {\n  const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  winningCombos.forEach(combo => {\n    const _combo = _slicedToArray(combo, 3),\n          a = _combo[0],\n          b = _combo[1],\n          c = _combo[2];\n\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      return true;\n    }\n  }); // for (let i = 0; i < winningCombos.length; i++) {\n  //     console.log(winningCombos[i]);\n  //     const [a, b, c] = winningCombos[i];\n  //     console.log(squares[a], squares[b], squares[c]);\n  //     if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n  //         return true;\n  //     }\n  // }\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","Board","props","gameWon","wonGame","board","name","currentPlayer","name1","name2","winningPlayer","message","console","log","map","square","index","squares","winningCombos","forEach","combo","a","b","c","mapStateToProps","state","players"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\n\nconst Board = props => {\n    const gameWon = wonGame(props.board);\n    const name = props.currentPlayer === 'X'\n        ? props.name1 : props.name2;\n    const winningPlayer = gameWon ? props.currentPlayer === 'X' ?\n        props.name2 : props.name1 : null;\n    const message = gameWon ? `${winningPlayer} WINS!` :\n        `${name}'s turn to play`;\n\n    console.log(gameWon);\n\n    return (\n        <Fragment>\n            <div className='board'>\n                {props.board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        currentPlayer={props.currentPlayer}\n                        disabled={gameWon}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n        </Fragment>\n    );\n};\n\nconst wonGame = (squares) => {\n    const winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    winningCombos.forEach( combo => {\n        const [a, b, c] = combo;\n        if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return true;\n        }\n    });\n\n    // for (let i = 0; i < winningCombos.length; i++) {\n    //     console.log(winningCombos[i]);\n    //     const [a, b, c] = winningCombos[i];\n    //     console.log(squares[a], squares[b], squares[c]);\n    //     if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n    //         return true;\n    //     }\n    // }\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}