{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { changePlayer } from \"../ducks/currentPlayerReducer\";\nimport { actionPlace } from \"../ducks/boardReducer\";\nimport { handleGameFinishing } from \"./handleGameFinishing\";\nconst winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nexport const handleSquareClicked = squareIndex => (dispatch, getState) => {\n  if (getState().board[squareIndex] == null) {\n    dispatch(actionPlace(squareIndex, getState().currentPlayer));\n    dispatch(changePlayer());\n  }\n\n  let squares = getState().board;\n  winningCombos.forEach(combo => {\n    const _combo = _slicedToArray(combo, 3),\n          a = _combo[0],\n          b = _combo[1],\n          c = _combo[2];\n\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      dispatch(handleGameFinishing(a, b, c));\n    }\n  });\n}; // dispatch(addOneToScore( getState().currentPlayer));\n// dispatch(setPlayer('x'));\n// dispatch(clearBoard())","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/thunks/handleSquareClicked.js"],"names":["changePlayer","actionPlace","handleGameFinishing","winningCombos","handleSquareClicked","squareIndex","dispatch","getState","board","currentPlayer","squares","forEach","combo","a","b","c"],"mappings":";AAAA,SAAQA,YAAR,QAA2B,+BAA3B;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AACA,SAAQC,mBAAR,QAAkC,uBAAlC;AAEA,MAAMC,aAAa,GAAG,CAClB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkB,EAElB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHkB,EAIlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJkB,EAKlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALkB,EAMlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANkB,EAOlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPkB,EAQlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARkB,CAAtB;AAWA,OAAO,MAAMC,mBAAmB,GAAIC,WAAD,IAAiB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACxE,MAAGA,QAAQ,GAAGC,KAAX,CAAiBH,WAAjB,KAAiC,IAApC,EAA0C;AACtCC,IAAAA,QAAQ,CAACL,WAAW,CAACI,WAAD,EAAcE,QAAQ,GAAGE,aAAzB,CAAZ,CAAR;AACAH,IAAAA,QAAQ,CAACN,YAAY,EAAb,CAAR;AACH;;AAED,MAAIU,OAAO,GAAGH,QAAQ,GAAGC,KAAzB;AACAL,EAAAA,aAAa,CAACQ,OAAd,CAAuBC,KAAK,IAAI;AAAA,kCACVA,KADU;AAAA,UACrBC,CADqB;AAAA,UAClBC,CADkB;AAAA,UACfC,CADe;;AAE5B,QAAGL,OAAO,CAACG,CAAD,CAAP,KAAe,IAAf,IAAuBH,OAAO,CAACG,CAAD,CAAP,KAAeH,OAAO,CAACI,CAAD,CAA7C,IAAoDJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAA7E,EAAkF;AAC9ET,MAAAA,QAAQ,CAACJ,mBAAmB,CAACW,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAApB,CAAR;AACH;AACJ,GALD;AAMH,CAbM,C,CAgBP;AACA;AACA","sourcesContent":["import {changePlayer} from \"../ducks/currentPlayerReducer\";\nimport {actionPlace} from \"../ducks/boardReducer\";\nimport {handleGameFinishing} from \"./handleGameFinishing\";\n\nconst winningCombos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\nexport const handleSquareClicked = (squareIndex) => (dispatch, getState) => {\n    if(getState().board[squareIndex] == null) {\n        dispatch(actionPlace(squareIndex, getState().currentPlayer));\n        dispatch(changePlayer());\n    }\n\n    let squares = getState().board;\n    winningCombos.forEach( combo => {\n        const [a, b, c] = combo;\n        if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n            dispatch(handleGameFinishing(a, b, c));\n        }\n    });\n};\n\n\n// dispatch(addOneToScore( getState().currentPlayer));\n// dispatch(setPlayer('x'));\n// dispatch(clearBoard())\n"]},"metadata":{},"sourceType":"module"}