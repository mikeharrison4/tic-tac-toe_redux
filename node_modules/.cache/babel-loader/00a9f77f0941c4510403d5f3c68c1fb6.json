{"ast":null,"code":"var _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\nimport Scores from \"./Scores\";\n\nconst Board = ({\n  currentPlayer,\n  board,\n  gameFinished,\n  winningSquares,\n  player1,\n  player2,\n  handleClearGame\n}) => {\n  const name = currentPlayer === 'X' ? player1 : player2;\n  const winningPlayer = gameFinished ? currentPlayer === 'X' ? player2 : player1 : null;\n  const message = gameFinished ? `${winningPlayer} WINS!` : `${name}'s turn to play`;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => handleClearGame,\n    disabled: !gameFinished,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    gameFinished: gameFinished,\n    winningSquares: winningSquares,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, message)), React.createElement(Scores, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  player1: state.players[0],\n  player2: state.players[1],\n  winningSquares: state.winningSquares,\n  gameFinished: state.gameFinished\n});\n\nexport default connect(mapStateToProps)(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","Scores","Board","currentPlayer","board","gameFinished","winningSquares","player1","player2","handleClearGame","name","winningPlayer","message","map","square","index","mapStateToProps","state","players"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA,YAAvB;AAAqCC,EAAAA,cAArC;AAAqDC,EAAAA,OAArD;AAA8DC,EAAAA,OAA9D;AAAuEC,EAAAA;AAAvE,CAAD,KAA6F;AAEvG,QAAMC,IAAI,GAAGP,aAAa,KAAK,GAAlB,GACPI,OADO,GACGC,OADhB;AAEA,QAAMG,aAAa,GAAGN,YAAY,GAAGF,aAAa,KAAK,GAAlB,GACjCK,OADiC,GACvBD,OADoB,GACV,IADxB;AAEA,QAAMK,OAAO,GAAGP,YAAY,GAAI,GAAEM,aAAc,QAApB,GACvB,GAAED,IAAK,iBADZ;AAGA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,OAAO,EAAE,MAAMD,eADnB;AAEI,IAAA,QAAQ,EAAE,CAACJ,YAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAOI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACS,GAAN,CAAW,CAACC,MAAD,EAASC,KAAT,KACR,oBAAC,WAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,MAAM,EAAED,MAFZ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,YAAY,EAAEV,YAJlB;AAKI,IAAA,cAAc,EAAEC,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CAPJ,EAkBI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIM,OAAJ,CADJ,CAlBJ,EAqBI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBJ,CADJ;AAyBH,CAlCD;;AAoCA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAChCb,EAAAA,KAAK,EAAEa,KAAK,CAACb,KADmB;AAEhCD,EAAAA,aAAa,EAAEc,KAAK,CAACd,aAFW;AAGhCI,EAAAA,OAAO,EAAEU,KAAK,CAACC,OAAN,CAAc,CAAd,CAHuB;AAIhCV,EAAAA,OAAO,EAAES,KAAK,CAACC,OAAN,CAAc,CAAd,CAJuB;AAKhCZ,EAAAA,cAAc,EAAEW,KAAK,CAACX,cALU;AAMhCD,EAAAA,YAAY,EAAEY,KAAK,CAACZ;AANY,CAAZ,CAAxB;;AASA,eAAeL,OAAO,CAACgB,eAAD,CAAP,CAAyBd,KAAzB,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\nimport Scores from \"./Scores\";\n\nconst Board = ({currentPlayer, board, gameFinished, winningSquares, player1, player2, handleClearGame}) => {\n\n    const name = currentPlayer === 'X'\n        ? player1 : player2;\n    const winningPlayer = gameFinished ? currentPlayer === 'X' ?\n        player2 : player1 : null;\n    const message = gameFinished ? `${winningPlayer} WINS!` :\n        `${name}'s turn to play`;\n\n    return (\n        <Fragment>\n            <button\n                onClick={() => handleClearGame}\n                disabled={!gameFinished}\n            >\n                Clear\n            </button>\n            <div className='board'>\n                {board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        gameFinished={gameFinished}\n                        winningSquares={winningSquares}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n            <Scores/>\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    player1: state.players[0],\n    player2: state.players[1],\n    winningSquares: state.winningSquares,\n    gameFinished: state.gameFinished\n});\n\nexport default connect(mapStateToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}