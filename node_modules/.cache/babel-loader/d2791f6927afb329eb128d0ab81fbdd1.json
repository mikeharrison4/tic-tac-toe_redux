{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\nimport { setWinningSquares } from \"../ducks/winningSquaresReducer\";\n\nconst Board = props => {\n  const checkForSuccess = () => {\n    console.log(gameWon);\n    let gameWon = wonGame(props.board);\n\n    if (gameWon) {\n      const _gameWon = _slicedToArray(gameWon, 3),\n            a = _gameWon[0],\n            b = _gameWon[1],\n            c = _gameWon[2];\n\n      props.setWinningSquares(a, b, c);\n    }\n  }; //\n  // const name = props.currentPlayer === 'X'\n  //     ? props.name1 : props.name2;\n  // const winningPlayer = gameWon ? props.currentPlayer === 'X' ?\n  //     props.name2 : props.name1 : null;\n  // const message = gameWon ? `${winningPlayer} WINS!` :\n  //     `${name}'s turn to play`;\n\n\n  console.log(props.winningSquares);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer // gameWon={gameWon}\n    ,\n    check: checkForSuccess,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, message)));\n};\n\nconst wonGame = squares => {\n  let won = false;\n  const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  winningCombos.forEach(combo => {\n    const _combo = _slicedToArray(combo, 3),\n          a = _combo[0],\n          b = _combo[1],\n          c = _combo[2];\n\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      won = combo;\n    }\n  });\n  return won;\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1],\n  winningSquares: state.winningSquares\n});\n\nexport default connect(mapStateToProps, {\n  setWinningSquares\n})(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","setWinningSquares","Board","props","checkForSuccess","console","log","gameWon","wonGame","board","a","b","c","winningSquares","map","square","index","currentPlayer","message","squares","won","winningCombos","forEach","combo","mapStateToProps","state","name1","players","name2"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\nimport {setWinningSquares} from \"../ducks/winningSquaresReducer\";\n\nconst Board = props => {\n\n    const checkForSuccess = () => {\n        console.log(gameWon);\n        let gameWon = wonGame(props.board);\n        if(gameWon) {\n            const [a, b, c] = gameWon;\n            props.setWinningSquares(a, b, c);\n        }\n    };\n    //\n    // const name = props.currentPlayer === 'X'\n    //     ? props.name1 : props.name2;\n    // const winningPlayer = gameWon ? props.currentPlayer === 'X' ?\n    //     props.name2 : props.name1 : null;\n    // const message = gameWon ? `${winningPlayer} WINS!` :\n    //     `${name}'s turn to play`;\n\n    console.log(props.winningSquares);\n\n\n    return (\n        <Fragment>\n            <div className='board'>\n                {props.board.map( (square, index) => (\n                    <BoardSquare\n                        key={index}\n                        square={square}\n                        index={index}\n                        currentPlayer={props.currentPlayer}\n                        // gameWon={gameWon}\n                        check={checkForSuccess}\n                    />\n                ) )}\n            </div>\n            <div className='instructions'>\n                <p>{message}</p>\n            </div>\n        </Fragment>\n    );\n};\n\nconst wonGame = (squares) => {\n    let won = false;\n    const winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    winningCombos.forEach( combo => {\n        const [a, b, c] = combo;\n        if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n            won = combo;\n        }\n    });\n    return won;\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1],\n    winningSquares: state.winningSquares\n});\n\nexport default connect(mapStateToProps, { setWinningSquares })(Board);\n"]},"metadata":{},"sourceType":"module"}