{"ast":null,"code":"import _slicedToArray from \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js\";\nimport React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport { connect } from \"react-redux\";\n\nconst Board = props => {\n  const message = wonGame(props.board) ? `${name} WINS!` : `${name}'s turn to play`;\n  const name = props.currentPlayer === 'X' ? props.name1 : props.name2;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, props.board.map((square, index) => React.createElement(BoardSquare, {\n    key: index,\n    square: square,\n    index: index,\n    currentPlayer: props.currentPlayer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, message)));\n};\n\nconst wonGame = squares => {\n  const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < winningCombos.length; i++) {\n    const _winningCombos$i = _slicedToArray(winningCombos[i], 3),\n          a = _winningCombos$i[0],\n          b = _winningCombos$i[1],\n          c = _winningCombos$i[2];\n\n    if (squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n      return true;\n    }\n  }\n};\n\nconst mapStateToProps = state => ({\n  board: state.board,\n  currentPlayer: state.currentPlayer,\n  name1: state.players[0],\n  name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);","map":{"version":3,"sources":["/Users/mdhar6/Workspace/React-dev/ReduxPractice/tic-tac-toe/src/components/Board.js"],"names":["React","Fragment","BoardSquare","connect","Board","props","message","wonGame","board","name","currentPlayer","name1","name2","map","square","index","squares","winningCombos","i","length","a","b","c","mapStateToProps","state","players"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACd,QAAMC,OAAO,GAAGC,OAAO,CAACF,KAAK,CAACG,KAAP,CAAP,GAAwB,GAAEC,IAAK,QAA/B,GACX,GAAEA,IAAK,iBADZ;AAED,QAAMA,IAAI,GAAGJ,KAAK,CAACK,aAAN,KAAwB,GAAxB,GACPL,KAAK,CAACM,KADC,GACON,KAAK,CAACO,KAD1B;AAGA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACG,KAAN,CAAYK,GAAZ,CAAiB,CAACC,MAAD,EAASC,KAAT,KACd,oBAAC,WAAD;AACI,IAAA,GAAG,EAAEA,KADT;AAEI,IAAA,MAAM,EAAED,MAFZ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,aAAa,EAAEV,KAAK,CAACK,aAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CADJ,EAWI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,OAAJ,CADJ,CAXJ,CADJ;AAiBP,CAvBD;;AAyBA,MAAMC,OAAO,GAAIS,OAAD,IAAa;AACzB,QAAMC,aAAa,GAAG,CAClB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkB,EAElB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHkB,EAIlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJkB,EAKlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALkB,EAMlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANkB,EAOlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPkB,EAQlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARkB,CAAtB;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAAA,4CACzBD,aAAa,CAACC,CAAD,CADY;AAAA,UACpCE,CADoC;AAAA,UACjCC,CADiC;AAAA,UAC9BC,CAD8B;;AAE3C,QAAGN,OAAO,CAACI,CAAD,CAAP,KAAe,IAAf,IAAuBJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAA7C,IAAoDL,OAAO,CAACK,CAAD,CAAP,KAAeL,OAAO,CAACM,CAAD,CAA7E,EAAkF;AAC9E,aAAO,IAAP;AACH;AACJ;AACJ,CAjBD;;AAmBA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAChChB,EAAAA,KAAK,EAAEgB,KAAK,CAAChB,KADmB;AAEhCE,EAAAA,aAAa,EAAEc,KAAK,CAACd,aAFW;AAGhCC,EAAAA,KAAK,EAAEa,KAAK,CAACC,OAAN,CAAc,CAAd,CAHyB;AAIhCb,EAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAc,CAAd;AAJyB,CAAZ,CAAxB;;AAOA,eAAetB,OAAO,CAACoB,eAAD,CAAP,CAAyBnB,KAAzB,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport BoardSquare from \"./BoardSquare\";\nimport {connect} from \"react-redux\";\n\nconst Board = props => {\n         const message = wonGame(props.board) ? `${name} WINS!` :\n             `${name}'s turn to play`;\n        const name = props.currentPlayer === 'X'\n            ? props.name1 : props.name2;\n\n        return (\n            <Fragment>\n                <div className='board'>\n                    {props.board.map( (square, index) => (\n                        <BoardSquare\n                            key={index}\n                            square={square}\n                            index={index}\n                            currentPlayer={props.currentPlayer}\n                        />\n                    ) )}\n                </div>\n                <div className='instructions'>\n                    <p>{message}</p>\n                </div>\n            </Fragment>\n        );\n};\n\nconst wonGame = (squares) => {\n    const winningCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < winningCombos.length; i++) {\n        const [a, b, c] = winningCombos[i];\n        if(squares[a] !== null && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return true;\n        }\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    board: state.board,\n    currentPlayer: state.currentPlayer,\n    name1: state.players[0],\n    name2: state.players[1]\n});\n\nexport default connect(mapStateToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}